@forward "uniform/core";
@use "uniform/core";
@use "sass:map";
@use "sass:list";
@use "sass:meta";

// DEFAULTS (3)
@use "core/root";
@use "core/keyframes";
@use "core/reset";
@use "core/starter";

// UTILITIES - ANIMATION (1)
@use "utilities/animation/core-animation";

// UTILITIES - INTERACTIVE (5)
@use "utilities/interactive/core-cursor";
@use "utilities/interactive/core-pointer-events";
@use "utilities/interactive/core-resize";
@use "utilities/interactive/core-scrolling";
@use "utilities/interactive/core-user-select";

// UTILITIES - SVG (3)
@use "utilities/svg/core-fill";
@use "utilities/svg/core-stroke";
@use "utilities/svg/core-stroke-width";

// UTILITIES - TRANSFORM (10)
@use "utilities/transform/extension-translate-x";
@use "utilities/transform/extension-translate-y";
@use "utilities/transform/extension-scale-x";
@use "utilities/transform/extension-scale-y";
@use "utilities/transform/extension-scale";
@use "utilities/transform/extension-skew-x";
@use "utilities/transform/extension-skew-y";
@use "utilities/transform/extension-rotate";
@use "utilities/transform/core-transform-origin";
@use "utilities/transform/core-transform";

// UTILITIES - GRID (9)
@use "utilities/grid/core-grid-auto-flow";
@use "utilities/grid/core-grid-column";
@use "utilities/grid/core-grid-column-end";
@use "utilities/grid/core-grid-column-start";
@use "utilities/grid/core-grid-row";
@use "utilities/grid/core-grid-row-end";
@use "utilities/grid/core-grid-row-start";
@use "utilities/grid/core-grid-template-columns";
@use "utilities/grid/core-grid-template-rows";

// UTILITIES - FLEXBOX (6)
@use "utilities/flexbox/core-flex";
@use "utilities/flexbox/core-flex-direction";
@use "utilities/flexbox/core-flex-grow";
@use "utilities/flexbox/core-flex-shrink";
@use "utilities/flexbox/core-flex-wrap";
@use "utilities/flexbox/core-order";

// UTILITIES - GAP (3)
@use "utilities/gap/core-gap";
@use "utilities/gap/core-column-gap";
@use "utilities/gap/core-row-gap";

// UTILITIES - POSITION (8)
@use "utilities/position/core-bottom";
@use "utilities/position/core-left";
@use "utilities/position/core-right";
@use "utilities/position/core-top";
@use "utilities/position/extension-x";
@use "utilities/position/extension-y";
@use "utilities/position/extension-xy";
@use "utilities/position/core-z-index";

// UTILITIES - COMPOSITION (8)
@use "utilities/composition/extension-ratio";
@use "utilities/composition/core-box-sizing";
@use "utilities/composition/core-clear";
@use "utilities/composition/core-float";
@use "utilities/composition/core-object-fit";
@use "utilities/composition/core-object-position";
@use "utilities/composition/core-position";
@use "utilities/composition/core-table-layout";

// UTILITIES - SCROLL (7)
@use "utilities/scroll/core-overflow-x";
@use "utilities/scroll/core-overflow-y";
@use "utilities/scroll/core-overflow";
@use "utilities/scroll/core-overscroll-x";
@use "utilities/scroll/core-overscroll-y";
@use "utilities/scroll/core-overscroll";
@use "utilities/scroll/core-scroll-behavior";

// UTILITIES - EFFECT (12)
@use "utilities/effect/core-box-shadow";
@use "utilities/effect/core-mix-blend-mode";
@use "utilities/effect/extension-backdrop-grayscale";
@use "utilities/effect/extension-backdrop-invert";
@use "utilities/effect/extension-backdrop-saturate";
@use "utilities/effect/extension-backdrop-blur";
@use "utilities/effect/core-backdrop-filter";
@use "utilities/effect/extension-filter-grayscale";
@use "utilities/effect/extension-filter-invert";
@use "utilities/effect/extension-filter-saturate";
@use "utilities/effect/extension-filter-blur";
@use "utilities/effect/core-filter";

// UTILITIES - BORDER (21)
@use "utilities/border/extension-border-opacity";
@use "utilities/border/extension-border-bottom-radius";
@use "utilities/border/extension-border-left-radius";
@use "utilities/border/extension-border-right-radius";
@use "utilities/border/extension-border-top-radius";
@use "utilities/border/core-border-bottom-left-radius";
@use "utilities/border/core-border-bottom-right-radius";
@use "utilities/border/core-border-top-left-radius";
@use "utilities/border/core-border-top-right-radius";
@use "utilities/border/core-border-radius";
@use "utilities/border/core-border-bottom-width";
@use "utilities/border/core-border-left-width";
@use "utilities/border/core-border-right-width";
@use "utilities/border/core-border-top-width";
@use "utilities/border/extension-border-x-width";
@use "utilities/border/extension-border-y-width";
@use "utilities/border/core-border-width";
@use "utilities/border/core-border-collapse";
@use "utilities/border/core-border-color";
@use "utilities/border/core-border-style";

// UTILITIES - PADDING (7)
@use "utilities/padding/core-padding-bottom";
@use "utilities/padding/core-padding-left";
@use "utilities/padding/core-padding-right";
@use "utilities/padding/core-padding-top";
@use "utilities/padding/extension-padding-x";
@use "utilities/padding/extension-padding-y";
@use "utilities/padding/core-padding";

// UTILITIES - MARGIN (7)
@use "utilities/margin/core-margin-bottom";
@use "utilities/margin/core-margin-left";
@use "utilities/margin/core-margin-right";
@use "utilities/margin/core-margin-top";
@use "utilities/margin/extension-margin-x";
@use "utilities/margin/extension-margin-y";
@use "utilities/margin/core-margin";

// UTILITIES - ALIGNMENT (7)
@use "utilities/alignment/core-align-content";
@use "utilities/alignment/core-align-items";
@use "utilities/alignment/core-align-self";
@use "utilities/alignment/core-justify-content";
@use "utilities/alignment/core-justify-items";
@use "utilities/alignment/core-justify-self";
@use "utilities/alignment/core-vertical-align";

// UTILITIES - SIZING (6)
@use "utilities/sizing/core-height";
@use "utilities/sizing/core-width";
@use "utilities/sizing/core-min-height";
@use "utilities/sizing/core-min-width";
@use "utilities/sizing/core-max-height";
@use "utilities/sizing/core-max-width";

// UTILITIES - PLACEHOLDER (3)
@use "utilities/placeholder/core-placeholder-color";

// UTILITIES - APPEARANCE (6)
@use "utilities/appearance/core-display";
@use "utilities/appearance/core-opacity";
@use "utilities/appearance/core-outline";
@use "utilities/appearance/core-visibility";
@use "utilities/appearance/core-appearance";
@use "utilities/appearance/core-font-smooth";

// UTILITIES - BACKGROUND (9)
@use "utilities/background/extension-background-opacity";
@use "utilities/background/core-background-attachment";
@use "utilities/background/core-background-clip";
@use "utilities/background/core-background-color";
@use "utilities/background/core-background-position";
@use "utilities/background/core-background-repeat";
@use "utilities/background/core-background-size";
@use "utilities/background/core-background";

// UTILITIES - TRANSITION (5)
@use "utilities/transition/core-transition-duration";
@use "utilities/transition/core-transition-delay";
@use "utilities/transition/core-transition-property";
@use "utilities/transition/core-transition-timing-function";
@use "utilities/transition/core-transition";

// UTILITIES - TYPOGRAPHY (19)
@use "utilities/typography/extension-color-opacity";
@use "utilities/typography/core-letter-spacing";
@use "utilities/typography/core-line-height";
@use "utilities/typography/core-list-style-position";
@use "utilities/typography/core-list-style-type";
@use "utilities/typography/core-overflow-wrap";
@use "utilities/typography/core-text-align";
@use "utilities/typography/core-text-decoration";
@use "utilities/typography/core-text-overflow";
@use "utilities/typography/core-text-transform";
@use "utilities/typography/core-white-space";
@use "utilities/typography/core-word-break";
@use "utilities/typography/core-font-family";
@use "utilities/typography/core-font-style";
@use "utilities/typography/core-font-weight";
@use "utilities/typography/core-font-size";
@use "utilities/typography/extension-text-size";
@use "utilities/typography/core-color";

// CONSTRUCTOR
$config: map.deep-merge(core.$all-config, core.$config);

$standard-class-set: ();
$standard-pseudo-set: ();
$responsive-class-set: ();
$responsive-pseudo-set: ();

@function map-reverse($map) {
	$result: null;

	@if type-of($map) == "map" {
			$keys: map-keys($map);
			$map-reversed: ();
			
			@for $i from length($keys) through 1 {
					$map-reversed: map-merge(
							$map-reversed,
							(nth($keys, $i): map-get($map, nth($keys, $i)))
					);
			}

			@if type-of($map-reversed) == "map" {
					$result: $map-reversed;
			} @else {
					@warn 'There was an error reversing the order of "#{$map}"';
			}
	} @else {
			@warn '"#{$map}" is not a valid map';
	}

	@return $result;
}

@mixin tree-constructor($config) {
	$prefix: map.get($config, prefix);
	$important: map.get($config, important);
	$delimiter: map.get($config, delimiter);
	$pseudo-delimiter: core.escape(map.get($config, pseudo-delimiter));
	$screen-delimiter: core.escape(map.get($config, screen-delimiter));

	$headless: map.get($config, headless);
	$placeholder-support: map.get($config, placeholder-support);
	$apply-support: map.get($config, apply-support);

	$utilities: map.get($config, utilities);
	$excludes: map.get($config, excludes);
	$includes: map.get($config, includes);

	$all-pseudos: map.get($config, pseudos);
	$all-screens: map.get($config, screens);

	// MAP GENERATION
	@each $utility, $utility-value in $utilities {
		@if (list.index($excludes, all) == null and list.index($excludes, $utility) == null) {

			// SETUP INITIAL VARIABLES
			$shorthand: map.get($utility-value, shorthand);
			$extra-selector: map.get($utility-value, extra-selector);
			$responsive: map.get($utility-value, responsive);
			$responsive-pseudos: map.get($utility-value, responsive-pseudos);

			$properties: map.get($utility-value, properties);
			$static-properties: map.get($utility-value, static-properties);

			// MERGE EXTENDED VARIANTS
			$variants: map.get($utility-value, variants);
			$variant-extends: map.get($utility-value, extend, variants);
			$merged-variants: ();
			@if ($variants != null) {
				$merged-variants: map.merge($merged-variants, $variants);
			}
			@if ($variant-extends != null) {
				$merged-variants: map.merge($merged-variants, $variant-extends);
			}

			// MERGE EXTENDED PSEUDOS
			$pseudos: map.get($utility-value, pseudos);
			$pseudo-extends: map.get($utility-value, extend, pseudos);
			$merged-pseudos: ();
			@if (list.index($pseudos, null) == null) {
				$merged-pseudos: list.join($merged-pseudos, $pseudos);
			}
			@if (list.index($pseudo-extends, null) == null) {
				$merged-pseudos: list.join($merged-pseudos, $pseudo-extends, $separator: comma);
			}

			// STANNDARD CLASS SET
			$class-set: ();
			$pseudo-set: ();
			
			@each $merged-variant, $merged-variant-value in $merged-variants {
				// COMPILE CLASS NAME
				$compiled-class-name: null;
				@if $shorthand == null {
					@if $merged-variant == null {
						@error "[#{$utility}] utility has null for both shorthand and variant.";
					} @else {
						$compiled-class-name: #{$prefix}#{$merged-variant};
					};
				} @else {
					@if $merged-variant == null {
						$compiled-class-name: #{$prefix}#{$shorthand};
					} @else {
						$compiled-class-name: #{$prefix}#{$shorthand}#{$delimiter}#{$merged-variant};
					};
				}

				// MERGE PROPERTIES
				$merged-properties: ();
				@if meta.type-of($merged-variant-value) == map {
					@each $key, $value in $merged-variant-value {
						$map: (
							#{$key}: $value #{if($important == true, !important, null)}
						);
						$merged-properties: map.merge($merged-properties, $map);
					}
				} @else {
					@each $property in $properties {
						$map: (
							#{$property}: $merged-variant-value #{if($important == true, !important, null)}
						);
						$merged-properties: map.merge($merged-properties, $map);
					}
				}

				$compiled-properties: map.merge($static-properties, $merged-properties);

				$map: (
					'#{$compiled-class-name}': (
						selector: '.#{$compiled-class-name}#{$extra-selector}',
						parent: null,
						category: standard,
						properties: (
							$compiled-properties
						)
					)
				);
				$class-set: map.merge($class-set, $map);

				// for EACH PSEUDO do the following
				@each $pseudo in $merged-pseudos {
					$compiled-pseudo-name: #{$pseudo}#{$pseudo-delimiter}#{$compiled-class-name};
					@if $pseudo == group-hover {
						$map: (
							'#{$compiled-pseudo-name}': (
								selector: '.group:hover .#{$compiled-pseudo-name}#{$extra-selector}',
								parent: '.#{$compiled-class-name}',
								category: pseudo,
								properties: (
									$compiled-properties
								)
							)
						);
						$pseudo-set: map.merge($pseudo-set, $map);
					} @else if $pseudo == group-focus {
						$map: (
							'#{$compiled-pseudo-name}': (
								selector: '.group:focus .#{$compiled-pseudo-name}#{$extra-selector}',
								parent: '.#{$compiled-class-name}',
								category: pseudo,
								properties: (
									$compiled-properties
								)
							)
						);
						$pseudo-set: map.merge($pseudo-set, $map);
					} @else {
						$map: (
							'#{$compiled-pseudo-name}': (
								selector: '.#{$compiled-pseudo-name}#{$extra-selector}#{map.get($all-pseudos, $pseudo)}',
								parent: '.#{$compiled-class-name}',
								category: pseudo,
								properties: (
									$compiled-properties
								)
							)
						);
						$pseudo-set: map.merge($pseudo-set, $map);
					}
				}
			}
			$standard-class-set: map.merge($standard-class-set, $class-set) !global;
			$standard-pseudo-set: map.merge($standard-pseudo-set, $pseudo-set) !global;


			// RESPONSIVE CLASS SET
			@if $responsive == true {
				@each $screen, $screen-value in $all-screens {
					$class-set: ();
					$pseudo-set: ();
					@each $merged-variant, $merged-variant-value in $merged-variants {

						// COMPILE CLASS NAME
						$compiled-class-name: null;
						@if $shorthand == null {
							@if $merged-variant == null {
								@error "[#{$utility}] utility has null for both shorthand and variant.";
							} @else {
								$compiled-class-name: #{$prefix}#{$merged-variant};
							};
						} @else {
							@if $merged-variant == null {
								$compiled-class-name: #{$prefix}#{$shorthand};
							} @else {
								$compiled-class-name: #{$prefix}#{$shorthand}#{$delimiter}#{$merged-variant};
							};
						}
			
						// MERGE PROPERTIES
						$merged-properties: ();
						@if meta.type-of($merged-variant-value) == map {
							@each $key, $value in $merged-variant-value {
								$map: (
									#{$key}: $value #{if($important == true, !important, null)}
								);
								$merged-properties: map.merge($merged-properties, $map);
							}
						} @else {
							@each $property in $properties {
								$map: (
									#{$property}: $merged-variant-value #{if($important == true, !important, null)}
								);
								$merged-properties: map.merge($merged-properties, $map);
							}
						}
			
						$compiled-properties: map.merge($static-properties, $merged-properties);
			
						$map: (
							'#{$screen}#{$screen-delimiter}#{$compiled-class-name}': (
								selector: '.#{$screen}#{$screen-delimiter}#{$compiled-class-name}#{$extra-selector}',
								parent: null,
								category: standard,
								screen: $screen,
								properties: (
									$compiled-properties
								)
							)
						);

						$class-set: map.merge($class-set, $map);
			
						@if $responsive-pseudos == true {

							// for EACH PSEUDO do the following
							@each $pseudo in $merged-pseudos {
								$compiled-responsive-pseudo-name: #{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter};

								@if $pseudo == group-hover {
									$map: (
										'#{$compiled-responsive-pseudo-name}#{$compiled-class-name}': (
											selector: '.group:hover .#{$compiled-responsive-pseudo-name}#{$compiled-class-name}#{$extra-selector}',
											parent: '.#{$screen}#{$screen-delimiter}#{$compiled-class-name}',
											category: pseudo,
											screen: $screen,
											properties: (
												$compiled-properties
											)
										)
									);
									$pseudo-set: map.merge($pseudo-set, $map);
								} @else if $pseudo == group-focus {
									$map: (
										'#{$compiled-responsive-pseudo-name}#{$compiled-class-name}': (
											selector: '.group:focus .#{$compiled-responsive-pseudo-name}#{$compiled-class-name}#{$extra-selector}',
											parent: '.#{$screen}#{$screen-delimiter}#{$compiled-class-name}',
											category: pseudo,
											screen: $screen,
											properties: (
												$compiled-properties
											)
										)
									);
									$pseudo-set: map.merge($pseudo-set, $map);
								} @else {
									$map: (
										'#{$compiled-responsive-pseudo-name}#{$compiled-class-name}': (
											selector: '.#{$compiled-responsive-pseudo-name}#{$compiled-class-name}#{$extra-selector}#{map.get($all-pseudos, $pseudo)}',
											parent: '.#{$screen}#{$screen-delimiter}#{$compiled-class-name}',
											category: pseudo,
											screen: $screen,
											properties: (
												$compiled-properties
											)
										)
									);
									$pseudo-set: map.merge($pseudo-set, $map);
								}
							}
						}
					}
					$responsive-class-set: map.merge($responsive-class-set, $class-set) !global;
					$responsive-pseudo-set: map.merge($responsive-pseudo-set, $pseudo-set) !global;
				}
			}
		}
	}
}

@include tree-constructor($config);

$standard-class-set: map.merge($standard-class-set, $standard-pseudo-set);
$responsive-class-set: map.merge($responsive-class-set, $responsive-pseudo-set);
$merged-class-set: map.merge($standard-class-set, $responsive-class-set);

// CLASS GENERATION
@if map.get($config, headless) == false {
	@if map.get($config, comma-compression) == true {
		@each $class, $detail in $standard-class-set {
			$selector: map.get($detail, selector);
			$parent: map.get($detail, parent);
			$category: map.get($detail, category);
			$properties: map.get($detail, properties);
	
			#{$selector} {
				@if $category == standard {
					@each $key, $value in $properties {
						#{$key}: #{$value};
					}
				} @else {
					@extend #{$parent};
				}
			}
		}

		@each $screen, $screen-value in map.get($config, screens) {
			@media (min-width: $screen-value) {
				@each $class, $detail in $responsive-class-set {
					@if $screen == map.get($detail, screen) {
						$selector: map.get($detail, selector);
						$parent: map.get($detail, parent);
						$category: map.get($detail, category);
						$properties: map.get($detail, properties);
						
						#{$selector} {
							@if $category == standard {
								@each $key, $value in $properties {
									#{$key}: #{$value};
								}
							} @else {
								@extend #{$parent};
							}
						}
					}
				}				
			}
		}
	} @else {
		@each $class, $detail in $standard-class-set {
			$selector: map.get($detail, selector);
			$parent: map.get($detail, parent);
			$category: map.get($detail, category);
			$properties: map.get($detail, properties);
	
			#{$selector} {
				@each $key, $value in $properties {
					#{$key}: #{$value};
				}
			}
		}

		@each $screen, $screen-value in map.get($config, screens) {
			@media (min-width: $screen-value) {
				@each $class, $detail in $responsive-class-set {
					@if $screen == map.get($detail, screen) {
						$selector: map.get($detail, selector);
						$parent: map.get($detail, parent);
						$category: map.get($detail, category);
						$properties: map.get($detail, properties);
						
						#{$selector} {
							@each $key, $value in $properties {
								#{$key}: #{$value};
							}
						}
					}
				}				
			}
		}
	}
	
}



@mixin apply($utilities) {
  $utility-array: core.string-split($utilities, ' ');
  @each $utility in $utility-array {
    $escaped-utility: core.escape($utility);
		@if map.get($merged-class-set, $escaped-utility) == null {
			@error '[#{$utility}] could not be found, please check spelling.';
		} @else {
			$target-utility: map.get($merged-class-set, $escaped-utility);
			$properties: map.get($target-utility, properties);
			$selector: map.get($target-utility, selector);
			$category: map.get($target-utility, category);
			$screen: map.get($target-utility, screen);
			
			@if $screen == null {
				@if $category == pseudo {
					@at-root #{$selector} {
						@each $property, $value in $properties {
							#{$property}: #{$value};
						}
					}
				} @else {
					@each $property, $value in $properties {
						#{$property}: #{$value};
					}
				}
			} @else {
				@media (min-width: map.get($config, screens, $screen)) {
					@if $category == pseudo {
						@at-root #{$selector} {
							@each $property, $value in $properties {
								#{$property}: #{$value};
							}
						}
					} @else {
						@each $property, $value in $properties {
							#{$property}: #{$value};
						}
					}
				}
			}
		}
		
  }
}